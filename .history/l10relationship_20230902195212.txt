=>eloqunet relationship

=> one to one 

protected $table = "users";
protected $primaryKey = "id";


=>In Model (Article.php )

  public function userfromuserphp(){
        return $this->BelongsTo("APP\Models\Users");
    }


    //for one 
    public function userfromuserphp(){
        // return $this->belongsTo("APP\Models\Users");
        return $this->belongsTo(User::class);

    }



      //for many 
      public function userfromuserphp(){
        // return $this->belongsTo("APP\Models\Users");
        return $this->belongsTo(User::class);

    }


=>In MOdel (users)
      public function customearticle(){
        // Method 1 
        // return $this->hasOne('APP\Models\Article');

        // Method 2 
        return $this->hasOne(Article::class);
    }

     public function customearticles(){
        return $this->hasMany(Article::class);
    }






=>In Web 
use App\Models\User;
    

Route::get('users/{id}/article',function($id){
   $articles = User::findOrFail($id)->customearticle->title;
   $articles = User::findOrFail($id)->customearticle->description;
   $articles = User::findOrFail($id)->customearticle->rating;

   return $articles;
});



Route::get('articles/{id}/user',function($id){
    $articles = Article::findOrFail($id)->userfromuserphp->name;
   return $articles;

});


---------------------------------------------

//=ONe to many 

--------------------------------

//many to many 


Route::get('user/{id}/role',function($id){
    // $user = User::findOrFail($id);
    // return $user->rolemanytomany;


    $user = User::findOrFail($id);
    
    foreach($user->rolemanytomany as $role){

        echo $role->name."<br>";
    
       }
});



------------------------

=Migration 

php artisan make::migration create_roles_table

php artisan make:model Role -m 
$table->string('name');



=> Obey by Laravel Nameing Conversion  
              //laravel know role table + user table          //can't chage 
php artisan make:migration create_roles_users_table --create="role_user";
$table->unsignedBigInteger('user_id);
$table->unsignedBigInteger('role_id);

php artisan migrate:status 
php artisan migrate 


=>In Model (User.php)
  public function rolemanytomany(){
        return $this->belongsToMany(Role::class);
    }


=Migration  (Laravel format name)

php artisan migrate:rollback --pretend 
php artisan migrate:rollback


                                 //migration just naming. so can chage 
php artisan make:migration create_users_roles_table --create="role_user";
$table->unsignedBigInteger('user_id);
$table->unsignedBigInteger('role_id);




=Migration  (Custom table name )

php artisan migrate:rollback --pretend 
php artisan migrate:rollback

php artisan migrate:status 


                                 //migration just naming. so can chage 
php artisan make:migration create_users_roles_table --create="userroles";
$table->unsignedBigInteger('user_id);
$table->unsignedBigInteger('role_id);




=>User.php 

    public function rolecreatedata(){

        // return $this->belongsToMany(Role::class)->withPivot('created_at'); //Error cuse of   custom table name

        return $this->belongsToMany(Role::class,'userroles','user_id','role_id')->withPivot('created_at');


    }


=Web.php 
Route::get('users/{id}/rolecreatedate',function($id){
    $user = User::findOrFail($id);
    foreach($user->rolecreatedate as $role){
        echo $role->pivot->created_at. "<br>";
    }
});

---------------------------------------------------

= Has Many Through Relationship 

= Migration 
php artisan make:model Gender -m 
$table->string(name);

=Add Columns 
php artisan make:migration add_gender_id _to_users_table --table=users
=up by sort 
$table->interger('gender_id')->after('password');
=down 
$table->dropColumn('gender_id');
php artisan migrate 


php artisan migrate:status 
php artisan migrate 

=In Model (User.php)


=In Web  

---------------------------------------
=> Polymorphic Relationship 

-Migration 

php artisan make:model Photo -m 
$table->string('path');
$table->interger('imageable_id')->unsignedBigInteger();
$table->interger('imageable_type')->unsignedBigInteger();

php artisan migrate:status 
php artisan migrate

= In model (User.php)
public function photos(){
        //morphMany(relatedtable,name);
        return $this->morphMany(Photo::class,'imageable');
}

= In model (Artilecle.php)
public function photos(){
        //morphMany(relatedtable,name);
        return $this->morphMany(Photo::class,'imageable');  //          $table->interger(' ** imageable_id')->unsignedBigInteger(); 
}



=>Database 
id   path                                imageable_id       imageable_type 
1    public\assets\photo\cutedog5.jpg         1             App\Models\User



In web 
Route::get('users/{id}/photo',function($id){
    $user = User::findOrFind($id);

    foreach($user->photos as $photo){
        echo $photo->path. "<br>";
    }

});


Route::get('users/{id}/photo',function($id){
    $article = Article::findOrFind($id);

    foreach($article->photos as $photo){
        echo $photo->path. "<br>";
    }

});


--------

= Reverse Thinking 

In Model 




= Migration 

php artisan make:model Comment -m 
$this->sting('message');
$this->sting('user_id');
$table->interger('commetable_id')->unsignedBigInteger();
$table->interger('commetable_type')->unsignedBigInteger();


php artisan migrate:status 
php artisan migrate 


Database 
id message user_id commentable_id 